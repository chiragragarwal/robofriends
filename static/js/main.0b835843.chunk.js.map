{"version":3,"sources":["serviceWorker.js","components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundary.js","containers/App.js","index.js"],"names":["Boolean","window","location","hostname","match","Card","props","id","name","email","className","src","alt","CardList","cardsArray","robots","map","user","key","username","SearchBox","searchChange","type","placeholder","onChange","Scroll","style","overflow","border","height","children","ErrorBoundary","state","hasError","this","setState","React","Component","App","onSearchChange","event","searchfield","target","value","fetch","then","response","json","users","filteredRobots","filter","item","toLowerCase","includes","length","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"sMAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,sCCcSC,EAdF,SAACC,GAAW,IACdC,EAAmBD,EAAnBC,GAAIC,EAAeF,EAAfE,KAAMC,EAASH,EAATG,MAEjB,OACI,yBAAKC,UAAU,uDACX,yBAAKC,IAAG,+BAA0BJ,EAA1B,aAAyCK,IAAI,YACrD,6BACI,4BAAKJ,GACL,2BAAIC,MCGLI,EA1BE,SAAC,GAAc,IAOtBC,EAPqB,EAAZC,OAOWC,KAAI,SAACC,GAC3B,OAAQ,kBAAC,EAAD,CACIC,IAAKD,EAAKV,GACVA,GAAIU,EAAKV,GACTC,KAAMS,EAAKT,KACXW,SAAUF,EAAKE,SACfV,MAAOQ,EAAKR,WAI5B,OAGI,6BACKK,ICVEM,EAZG,SAAC,GAAoB,IAAnBC,EAAkB,EAAlBA,aAChB,OACI,yBAAKX,UAAU,OACX,2BAAOA,UAAU,mCACVY,KAAK,SACLC,YAAY,gBACZC,SAAUH,MCEdI,EARA,SAACnB,GACZ,OACI,yBAAKoB,MAAO,CAAEC,SAAU,SAAUC,OAAQ,kBAAmBC,OAAQ,UAChEvB,EAAMwB,WCoBJC,E,kDAtBX,aAAc,IAAD,8BACT,gBACKC,MAAQ,CACTC,UAAU,GAHL,E,gEAQTC,KAAKC,SAAS,CAAEF,UAAU,M,+BAI1B,OAAIC,KAAKF,MAAMC,SACJ,2DAGAC,KAAK5B,MAAMwB,a,GAjBFM,IAAMC,WC+DnBC,G,wDAvDX,aAAc,IAAD,8BAET,gBAOJC,eAAiB,SAACC,GACd,EAAKL,SAAS,CAAEM,YAAaD,EAAME,OAAOC,SAP1C,EAAKX,MAAQ,CACTjB,OAAQ,GACR0B,YAAa,IALR,E,gEAiBO,IAAD,OAEfG,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKb,SAAS,CAACpB,OAAQiC,S,+BAGlC,MAI0Bd,KAAKF,MAA5BjB,EAJH,EAIGA,OAAQ0B,EAJX,EAIWA,YAGTQ,EAAiBlC,EAAOmC,QAAO,SAAAC,GACjC,OAAOA,EAAK3C,KAAK4C,cAAcC,SAASZ,EAAYW,kBAIxD,OAAsB,IAAlBrC,EAAOuC,OACA,wBAAI5C,UAAU,MAAd,cAIH,yBAAKA,UAAU,MACX,2CACA,kBAAC,EAAD,CAAWW,aAAca,KAAKK,iBAC9B,kBAAC,EAAD,KACI,kBAAC,EAAD,KACI,kBAAC,EAAD,CAAUxB,OAAQkC,W,GAhD5Bb,IAAMC,YCDxBkB,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SPwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBjB,MAAK,SAAAkB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.0b835843.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\n\n// class Card extends React.Component {\n//     render(){\n//         const {id, name, email} = this.props;\n\n//         return(\n//             <div className=\"tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5\">\n//                 <img src={`https://robohash.org/${id}?200x200`} alt=\"missing\"></img>\n//                 <div>\n//                     <h2>{name}</h2>\n//                     <p>{email}</p>\n//                 </div>\n//             </div>\n//         );\n//     }\n// };\n\nconst Card = (props) => {\n    const {id, name, email} = props;\n\n    return(\n        <div className=\"tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5\">\n            <img src={`https://robohash.org/${id}?&200x200`} alt=\"missing\"></img>\n            <div>\n                <h2>{name}</h2>\n                <p>{email}</p>\n            </div>\n        </div>\n    );\n}\n\nexport default Card;","import React from 'react';\nimport Card from './Card';\n\nconst CardList = ({robots}) => {\n\n    // Dummy error to demonstrate Error Boundary in React\n    // if (true){\n    //     throw new Error(\"NOoooooooooooooooooooo!\")\n    // }\n\n    const cardsArray = robots.map((user) => {\n        return (<Card \n                    key={user.id} \n                    id={user.id} \n                    name={user.name} \n                    username={user.username} \n                    email={user.email}/>\n                );\n    })\n\n    return (\n        // We can add the scrolling functionality here as well instead of creating a new Scroll component\n        // <div style={{ overflow: \"scroll\", border: '1px solid black', height: '800px' }}>\n        <div>\n            {cardsArray}\n        </div>\n    )\n}\n\nexport default CardList; ","import React from 'react';\n\nconst SearchBox = ({searchChange}) => {\n    return(\n        <div className='pa2'>\n            <input className='pa3 ba b--green bg-lightest-blue' \n                   type='search' \n                   placeholder='search robots'\n                   onChange={searchChange}\n            />\n        </div>\n    );\n}\n\nexport default SearchBox;","import React from 'react';\n\nconst Scroll = (props) => {\n    return(\n        <div style={{ overflow: \"scroll\", border: '1px solid black', height: '800px' }}>\n            {props.children}\n        </div>\n    );\n}\n\nexport default Scroll;","import React from 'react';\n\nclass ErrorBoundary extends React.Component{\n    constructor(){\n        super()\n        this.state = {\n            hasError: false\n        }\n    }\n\n    componentDidCatch(){\n        this.setState({ hasError: true })\n    }\n\n    render() {\n        if (this.state.hasError){\n            return <h1> Oops! This is not good :( </h1>\n        }\n        else{\n            return this.props.children\n        }\n    }\n\n}\n\nexport default ErrorBoundary;","import React from 'react';\nimport CardList from '../components/CardList';\nimport SearchBox from '../components/SearchBox';\nimport Scroll from '../components/Scroll';\nimport ErrorBoundary from '../components/ErrorBoundary';\n// import { robots } from './robots';\nimport './App.css';\n\nclass App extends React.Component {\n\n    constructor(){\n        // console.log('constructor');\n        super();\n        this.state = {\n            robots: [],\n            searchfield: ''\n        }\n    }\n\n    onSearchChange = (event) => {\n        this.setState({ searchfield: event.target.value })\n        // Note: ^^ the above change does not take place immediately at this point.\n        // It probably does it after the function is executed. \n        // console.log(this.state.searchfield);\n        \n    }\n\n    componentDidMount(){\n        // console.log('componentDidMount');\n        fetch('https://jsonplaceholder.typicode.com/users')\n        .then(response => response.json())\n        .then(users => this.setState({robots: users}))\n    }\n\n    render(){\n        // console.log('render');\n\n        // Destructuring the robots list and searchfield to keep it clean\n        const {robots, searchfield} = this.state;\n\n        // Filter the robots based on the searchfield\n        const filteredRobots = robots.filter(item => {\n            return item.name.toLowerCase().includes(searchfield.toLowerCase())\n        })\n        // console.log(filteredRobots);\n\n        if (robots.length === 0) {\n            return <h1 className=\"tc\">Loading...</h1>\n        }\n        else {\n            return(\n                <div className=\"tc\">\n                    <h1>RoboFriends</h1>\n                    <SearchBox searchChange={this.onSearchChange}/>\n                    <Scroll>\n                        <ErrorBoundary>\n                            <CardList robots={filteredRobots}/>\n                        </ErrorBoundary>\n                    </Scroll>\n                </div>\n            );\n        }\n    }\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\nimport App from './containers/App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}